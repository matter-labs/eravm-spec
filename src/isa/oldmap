  Context (pv := @PrimitiveValue.primitive_value Core.word).
  Record instruction_mapper {A B: descr}: Type :=
    {
      f_src_pv : src_pv A -> src_pv B -> Prop;
      f_src_fat_ptr: src_fat_ptr A -> src_fat_ptr B -> Prop;
      f_src_heap_ptr: src_heap_ptr A -> src_heap_ptr B -> Prop;
      f_src_farcall_params: src_farcall_params A -> src_farcall_params B -> Prop;
      f_src_nearcall_params: src_nearcall_params A -> src_nearcall_params B -> Prop;
      f_src_ret_params: src_ret_params A -> src_ret_params B -> Prop;
      f_dest_pv: dest_pv A -> dest_pv B -> Prop;
      f_dest_heap_ptr: dest_heap_ptr A -> dest_heap_ptr B -> Prop;
      f_dest_fat_ptr : dest_fat_ptr A -> dest_fat_ptr B -> Prop;
    }.

  Generalizable Variables i o swap fs imm.

  Inductive instruction_rmap {A B} (m:@instruction_mapper A B):  @instruction_abstr A -> @instruction_abstr B -> Prop :=
  | im_noop: instruction_rmap m OpNoOp OpNoOp
  | im_invalid: instruction_rmap m OpInvalid OpInvalid
  | im_sp_add: `(
                   f_src_pv m i1 i1' ->
                   instruction_rmap m (OpSpAdd i1 imm1) (OpSpAdd i1' imm1)
                 )
  | im_sp_sub: `(
                   f_src_pv m i1 i1' ->
                   instruction_rmap m (OpSpSub i1 imm1) (OpSpSub i1' imm1)
                 )
  | im_jump: `(
                 f_src_pv m i1 i1' ->
                 instruction_rmap m (OpJump i1) (OpJump i1')
               )
  | im_and: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpAnd i1 i2 o1 fs) (OpAnd i1' i2' o1'  fs)
              )
  | im_or: `(
               f_src_pv m i1 i1' ->
               f_src_pv m i2 i2' ->
               f_dest_pv m o1 o1' ->
               instruction_rmap m (OpOr i1 i2 o1  fs) (OpOr i1' i2' o1'  fs)
             )
  | im_xor: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpXor i1 i2 o1  fs) (OpXor i1' i2' o1'  fs)
              )
  | im_add: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpAdd i1 i2 o1  fs) (OpAdd i1' i2' o1'  fs)
              )
  | im_sub: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpSub i1 i2 o1  fs) (OpSub i1' i2' o1'  fs)
              )
  | im_shl: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpShl i1 i2 o1 fs) (OpShl i1' i2' o1' fs)
              )
  | im_shr: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpShr i1 i2 o1 fs) (OpShr i1' i2' o1' fs)
              )
  | im_rol: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpRol i1 i2 o1 fs) (OpRol i1' i2' o1' fs)
              )
  | im_ror: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                instruction_rmap m (OpRor i1 i2 o1 fs) (OpRor i1' i2' o1' fs)
              )
  | im_PtrAdd: `(
                   f_src_fat_ptr m i1 i1' ->
                   f_src_pv m i2 i2' ->
                   f_dest_fat_ptr m o1 o1' ->
                   instruction_rmap m (OpPtrAdd i1 i2 o1) (OpPtrAdd i1' i2' o1')
                 )
  | im_PtrSub: `(
                   f_src_fat_ptr m i1 i1' ->
                   f_src_pv m i2 i2' ->
                   f_dest_fat_ptr m o1 o1' ->
                   instruction_rmap m (OpPtrSub i1 i2 o1) (OpPtrSub i1' i2' o1')
                 )
  | im_PtrShrink: `(
                      f_src_fat_ptr m i1 i1' ->
                      f_src_pv m i2 i2' ->
                      f_dest_fat_ptr m o1 o1' ->
                      instruction_rmap m (OpPtrShrink i1 i2 o1) (OpPtrShrink i1' i2' o1')
                    )
  | im_PtrPack: `(
                    f_src_fat_ptr m i1 i1' ->
                    f_src_pv m i2 i2' ->
                    f_dest_pv m o1 o1' ->
                    instruction_rmap m (OpPtrPack i1 i2 o1) (OpPtrPack i1' i2' o1')
                  )
  | im_mul: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                f_dest_pv m o2 o2' ->
                instruction_rmap m (OpMul i1 i2 o1 o2  fs) (OpMul i1' i2' o1' o2' fs )
              )
  | im_div: `(
                f_src_pv m i1 i1' ->
                f_src_pv m i2 i2' ->
                f_dest_pv m o1 o1' ->
                f_dest_pv m o2 o2' ->
                instruction_rmap m (OpDiv i1 i2 o1 o2  fs) (OpDiv i1' i2' o1' o2'  fs)
              )
  | im_nearcall: `(
                     forall dest handler,
                       f_src_nearcall_params m i1 i1' ->
                       instruction_rmap m (OpNearCall i1 dest handler) (OpNearCall i1' dest handler)
                   )
  | im_farcall: `(
                    forall handler static shard,
                      f_src_farcall_params m i1 i1' ->
                      f_src_pv m i2 i2' ->
                      instruction_rmap m (OpFarCall i1 i2 handler static shard) (OpFarCall i1' i2' handler static shard)
                  )
  | im_mimiccall: `(
                      forall handler static shard,
                        f_src_farcall_params m i1 i1' ->
                        f_src_pv m i2 i2' ->
                        instruction_rmap m (OpMimicCall i1 i2 handler static shard) (OpMimicCall i1' i2' handler static shard)
                    )
  | im_delegatecall: `(
                         forall handler static shard,
                           f_src_farcall_params m i1 i1' ->
                           f_src_pv m i2 i2' ->
                           instruction_rmap m (OpDelegateCall i1 i2 handler static shard) (OpDelegateCall i1' i2' handler static shard)
                       )
  | im_nearret: instruction_rmap m OpNearRet OpNearRet
  | im_nearrevert: instruction_rmap m OpNearRevert OpNearRevert
  | im_nearpanic: instruction_rmap m OpPanic OpPanic
  | im_nearretto: forall l, instruction_rmap m (OpNearRetTo l) (OpNearRetTo l)
  | im_nearrevertto: forall l, instruction_rmap m (OpNearRevertTo l) (OpNearRevertTo l)
  | im_nearpanicto: forall l, instruction_rmap m (OpNearPanicTo l) (OpNearPanicTo l)
  | im_farret: `(
                   f_src_ret_params m i1 i1' ->
                   instruction_rmap m (OpFarRet i1) (OpFarRet i1')
                 )
  | im_farrevert: `(
                      f_src_ret_params m i1 i1' ->
                      instruction_rmap m (OpFarRevert i1) (OpFarRevert i1')
                    )
  | im_load:`( forall type,
          f_src_heap_ptr m i1 i1' ->
          f_dest_pv m o1 o1' ->
          instruction_rmap m (OpLoad i1 o1 type) (OpLoad  i1' o1' type)
      )
  | im_loadptr:`(
        f_src_fat_ptr m i1 i1' ->
        f_dest_pv m o1 o1' ->
        instruction_rmap m (OpLoadPointer i1 o1) (OpLoadPointer i1' o1' )
      )
  | im_loadinc:`( forall type,
          f_src_heap_ptr m i1 i1' ->
          f_dest_pv m o1 o1' ->
          f_dest_heap_ptr m o2 o2' ->
          instruction_rmap m (OpLoadInc i1 o1 type o2) (OpLoadInc i1' o1' type o2')
      )
  | im_loadptrinc:`(
        f_src_fat_ptr m i1 i1' ->
        f_dest_pv m o1 o1' ->
        f_dest_fat_ptr m o2 o2' ->
        instruction_rmap m (OpLoadPointerInc i1 o1 o2) (OpLoadPointerInc i1' o1' o2')
      )
  | im_store:`( forall type,
          f_src_heap_ptr m i1 i1' ->
          f_src_pv m i2 i2' ->
          f_dest_pv m o1 o1' ->
          instruction_rmap m (OpStore i1 i2 type) (OpStore i1' i2' type)
      )
  | im_storeinc:`( forall type,
          f_src_heap_ptr m i1 i1' ->
          f_src_pv m i2 i2' ->
          f_dest_heap_ptr m o1 o1' ->
          instruction_rmap m (OpStoreInc i1 i2 type o1) (OpStoreInc i1' i2' type o1')
      )
  |im_OpContextThis: `(
                         f_dest_pv m o1 o1' ->
                         instruction_rmap m (OpContextThis o1) (OpContextThis o1'))
  |im_OpContextCaller: `(
                           f_dest_pv m o1 o1' ->
                           instruction_rmap m (OpContextCaller o1) (OpContextCaller o1'))
  |im_OpContextCodeAddress: `(
                                f_dest_pv m o1 o1' ->
                                instruction_rmap m (OpContextCodeAddress o1) (OpContextCodeAddress o1'))
  |im_OpContextMeta: `(
                         f_dest_pv m o1 o1' ->
                         instruction_rmap m (OpContextMeta o1) (OpContextMeta o1'))
  |im_OpContextErgsLeft: `(
                             f_dest_pv m o1 o1' ->
                             instruction_rmap m (OpContextErgsLeft o1) (OpContextErgsLeft o1'))
  |im_OpContextSp: `(
                       f_dest_pv m o1 o1' ->
                       instruction_rmap m (OpContextSp o1) (OpContextSp o1'))
  |im_OpContextGetContextU128: `(
                                   f_dest_pv m o1 o1' ->
                                   instruction_rmap m (OpContextGetContextU128 o1) (OpContextGetContextU128 o1'))
  |im_OpContextSetContextU128: `(
                                   f_src_pv m i1 i1' ->
                                   instruction_rmap m (OpContextSetContextU128 i1) (OpContextSetContextU128 i1'))
  |im_OpContextSetErgsPerPubdataByte: `(
                                          f_src_pv m i1 i1' ->
                                          instruction_rmap m (OpContextSetErgsPerPubdataByte i1) (OpContextSetErgsPerPubdataByte i1'))
  |im_OpContextIncrementTxNumber: `(
                                      f_dest_pv m o1 o1' ->
                                      instruction_rmap m (OpContextIncrementTxNumber ) (OpContextIncrementTxNumber ))
  |im_OpSLoad: `(
                   f_src_pv m i1 i1' ->
                   f_dest_pv m o1 o1' ->
                   instruction_rmap m (OpSLoad i1 o1) (OpSLoad i1' o1'))
  |im_OpSStore: `(
                    f_src_pv m i1 i1' ->
                    f_src_pv m i2 i2' ->
                    instruction_rmap m (OpSStore i1 i2) (OpSStore i1' i2'))
  |im_OpToL1Message: `(forall first,
                           f_src_pv m i1 i1' ->
                           f_src_pv m i2 i2' ->
                           instruction_rmap m (OpToL1Message i1 i2 first) (OpToL1Message i1' i2' first))
  |im_OpEvent: `(forall first,
                     f_src_pv m i1 i1' ->
                     f_src_pv m i2 i2' ->
                     instruction_rmap m (OpEvent i1 i2 first) (OpEvent i1' i2' first))
  |im_OpPrecompileCall: `(
                            f_src_pv m i1 i1' ->
                            f_dest_pv m o1 o1' ->
                            instruction_rmap m (OpPrecompileCall i1 o1) (OpPrecompileCall i1' o1'))
  .


  Context {A B C} (m1: @instruction_mapper A B) (m2: @instruction_mapper B C).

  Definition rmap_comp {A B C} (m1: @instruction_mapper A B) (m2: @instruction_mapper B C) : @instruction_mapper A C :=
    {|
      f_src_pv := rcomp m1.(f_src_pv) m2.(f_src_pv);
      f_src_farcall_params := rcomp m1.(f_src_farcall_params) m2.(f_src_farcall_params);
      f_src_nearcall_params := rcomp m1.(f_src_nearcall_params) m2.(f_src_nearcall_params);
      f_src_ret_params := rcomp m1.(f_src_ret_params) m2.(f_src_ret_params);
      f_src_heap_ptr := rcomp m1.(f_src_heap_ptr) m2.(f_src_heap_ptr);
      f_src_fat_ptr := rcomp m1.(f_src_fat_ptr) m2.(f_src_fat_ptr);
      f_dest_pv := rcomp m1.(f_dest_pv) m2.(f_dest_pv);
      f_dest_fat_ptr := rcomp m1.(f_dest_fat_ptr) m2.(f_dest_fat_ptr);
      f_dest_heap_ptr := rcomp m1.(f_dest_heap_ptr) m2.(f_dest_heap_ptr);
    |}
  .
